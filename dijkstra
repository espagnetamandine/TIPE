import numpy as np
A = [ [], [], [] ] # chaque tab represente une ligne de la matrice
 #creer une liste de la matrice d'adjacence du graphe, à chercher comment faire 
 # 
def dijkstra (sommets, aretes, sommet_depart):
    # On initialise les distances a l'infini
    distances = [np.inf] * len(sommets)
    distances[sommet_depart] = 0
    sommets_visites = []

    # Tant qu'il y a des distances infinies dans les sommets non marques
    while [X for X in sommets if distances[X] != np.inf and X not in sommets_visites] != [] :
        # Determination du sommet le plus proche
        distance_minimale = np.inf
        for X in range(len(distances)):
            if X not in sommets_visites and distances[X] < distance_minimale:
                distance_minimale = distances[X]
                t = X

        # Determination des voisins
        voisins = [X for X in range(len(aretes[t])) if A[t][X] != 0] 
        for voisin in voisins:
            # Comparaison de la distance deja calculée des voisins avec la distance obtenue si on passe par le sommet actuel
            distances[voisin] = min(distances[voisin], distances[t] + A[t][voisin]) 
            # On a visite le sommet actuel
            sommets_visites.append(t)

    # On retourne les distances au sommet de depart de tous les sommets du graphe
    return distances 
